// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: rgrpc.proto

package rgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RgrpcService_OpenRgrpc_FullMethodName = "/rgrpc.RgrpcService/OpenRgrpc"
)

// RgrpcServiceClient is the client API for RgrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RgrpcServiceClient interface {
	// OpenRgrpc creates a "reverse" channel, which allows the server to
	// act as a client and send RPCs to the client that creates the tunnel. It
	// is in most respects identical to OpenTunnel except that the roles are
	// reversed: the server initiates RPCs and sends requests and the client
	// replies to them and sends responses.
	OpenRgrpc(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ServerToClient, ClientToServer], error)
}

type rgrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRgrpcServiceClient(cc grpc.ClientConnInterface) RgrpcServiceClient {
	return &rgrpcServiceClient{cc}
}

func (c *rgrpcServiceClient) OpenRgrpc(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ServerToClient, ClientToServer], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RgrpcService_ServiceDesc.Streams[0], RgrpcService_OpenRgrpc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServerToClient, ClientToServer]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RgrpcService_OpenRgrpcClient = grpc.BidiStreamingClient[ServerToClient, ClientToServer]

// RgrpcServiceServer is the server API for RgrpcService service.
// All implementations must embed UnimplementedRgrpcServiceServer
// for forward compatibility.
type RgrpcServiceServer interface {
	// OpenRgrpc creates a "reverse" channel, which allows the server to
	// act as a client and send RPCs to the client that creates the tunnel. It
	// is in most respects identical to OpenTunnel except that the roles are
	// reversed: the server initiates RPCs and sends requests and the client
	// replies to them and sends responses.
	OpenRgrpc(grpc.BidiStreamingServer[ServerToClient, ClientToServer]) error
	mustEmbedUnimplementedRgrpcServiceServer()
}

// UnimplementedRgrpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRgrpcServiceServer struct{}

func (UnimplementedRgrpcServiceServer) OpenRgrpc(grpc.BidiStreamingServer[ServerToClient, ClientToServer]) error {
	return status.Errorf(codes.Unimplemented, "method OpenRgrpc not implemented")
}
func (UnimplementedRgrpcServiceServer) mustEmbedUnimplementedRgrpcServiceServer() {}
func (UnimplementedRgrpcServiceServer) testEmbeddedByValue()                      {}

// UnsafeRgrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RgrpcServiceServer will
// result in compilation errors.
type UnsafeRgrpcServiceServer interface {
	mustEmbedUnimplementedRgrpcServiceServer()
}

func RegisterRgrpcServiceServer(s grpc.ServiceRegistrar, srv RgrpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedRgrpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RgrpcService_ServiceDesc, srv)
}

func _RgrpcService_OpenRgrpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RgrpcServiceServer).OpenRgrpc(&grpc.GenericServerStream[ServerToClient, ClientToServer]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RgrpcService_OpenRgrpcServer = grpc.BidiStreamingServer[ServerToClient, ClientToServer]

// RgrpcService_ServiceDesc is the grpc.ServiceDesc for RgrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RgrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rgrpc.RgrpcService",
	HandlerType: (*RgrpcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenRgrpc",
			Handler:       _RgrpcService_OpenRgrpc_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rgrpc.proto",
}
